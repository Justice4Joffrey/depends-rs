---
source: depends_core/src/macros/dependencies.rs
assertion_line: 125
expression: "format_source(dependencies_attr(TokenStream::new(),\n                input).to_string().as_str())"
---
struct Components {
    node1: ::depends::core::Dependency<::std::sync::Arc<Node1>>,
    node2: ::depends::core::Dependency<::std::sync::Arc<Node2>>,
    node3: ::depends::core::Dependency<::std::sync::Arc<Node3>>,
}
struct ComponentsRef<'a> {
    node1:
        <::depends::core::Dependency<::std::sync::Arc<Node1>> as ::depends::core::Resolve>::Output<
            'a,
        >,
    node2:
        <::depends::core::Dependency<::std::sync::Arc<Node2>> as ::depends::core::Resolve>::Output<
            'a,
        >,
    node3:
        <::depends::core::Dependency<::std::sync::Arc<Node3>> as ::depends::core::Resolve>::Output<
            'a,
        >,
}
impl Components {
    pub fn new(
        node1: ::std::sync::Arc<Node1>,
        node2: ::std::sync::Arc<Node2>,
        node3: ::std::sync::Arc<Node3>,
    ) -> Self {
        Self {
            node1: ::depends::core::Dependency::new(node1),
            node2: ::depends::core::Dependency::new(node2),
            node3: ::depends::core::Dependency::new(node3),
        }
    }
}
impl ::depends::core::Resolve for Components {
    type Output < 'a > = ComponentsRef < 'a > where Self : 'a ;

    fn resolve(&self, visitor: &mut impl ::depends::core::Visitor) -> Self::Output<'_> {
        ComponentsRef {
            node1: self.node1.resolve(visitor),
            node2: self.node2.resolve(visitor),
            node3: self.node3.resolve(visitor),
        }
    }
}
impl<'a> ::depends::core::IsDirty for ComponentsRef<'a> {
    fn is_dirty(&self) -> bool {
        self.node1.is_dirty() || self.node2.is_dirty() || self.node3.is_dirty()
    }
}

